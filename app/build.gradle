apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.mck.icndbclient"
        minSdkVersion 8
        targetSdkVersion 22
        versionCode 3
        versionName "3.0"
    }

    // the signing config for release requires there to be a console.
    signingConfigs {
        release {
            if (System.console() != null) {
                storeFile file("keystore/icndbclientkey.keystore")
                storePassword System.console().readLine("\nKeystore password: ")
                keyAlias System.console().readLine("\nKey alias: ")
                keyPassword System.console().readLine("\nKey password: ")
            }
        }
    }

    /**
     * There are six different build types: debug, release, millhouseDebug, calrissianDebug,
     * millhouseRelease, and calrissianRelease.
     *
     * Following the documentation, the additional buildTypes are instantiated with either
     * debug or release build types. Note that a java file by name can not exist in both
     * main and build type src directory.
     *
     * We also want to change the src for the additional build types. Which is done below
     * the buildTypes closure.
     */
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // atm, i am only using console to sign and release. A release
            // only happens with a signing config.
            if (System.console() != null) {
                signingConfig signingConfigs.release
            }
        }

        millhouseDebug.initWith(buildTypes.debug)
        millhouseDebug {
            applicationIdSuffix ".debug.millhouse"
        }

        calrissianDebug.initWith(buildTypes.debug)
        calrissianDebug {
            applicationIdSuffix ".debug.calrissian"
        }

        millhouseRelease.initWith(buildTypes.release)
        millhouseRelease {
            applicationIdSuffix ".release.millhouse"
        }

        calrissianRelease.initWith(buildTypes.release)
        calrissianRelease {
            applicationIdSuffix ".release.calrissian"
        }
    }

    // They use custom source sets.
    sourceSets {
        millhouseDebug.setRoot('src/millhouse')
        millhouseRelease.setRoot('src/millhouse')
        calrissianDebug.setRoot('src/calrissian')
        calrissianRelease.setRoot('src/calrissian')
    }

    // there are duplicates of these and the build system get confused so exclude them.
    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
    }

    /**
     * Product flavors seem to go with the aosp
     * concept of Multiple APKs. Documentation suggests
     * not using multiple apks unless necessary.
     * http://developer.android.com/google/play/publishing/multiple-apks.html
     * more info about using multiple akps can be found at
     * https://developer.android.com/training/multiple-apks/index.html
     *
     * I am going to use product flavors to make an upgrade to the UI.
     *
     * Unlike the calrissianRelease or millhouse build types, upgrades to the UI
     * are not creating a different application, but are different versions
     * of the same application. That makes them good candidates for flavors.
     *
     * These are product flavors for using a button or a ViewPager with adapters.
     * See app/src/androidTestButtonActivityFlavor and/or
     * app/src/androidTestJokeViewerFlavor for tests and the corresponding src/name
     * dir for flavor specific code. Flavors also incorporate the androidTest dir
     * into their tests.
     *
     * Also, from what i can tell it is an error to have duplicate java class names
     * in both the main or build type branches and the flavor branch, yet resources
     * are fine.
     */
    productFlavors {
        buttonFlavor {}
        viewPagerFlavor {}
    }
}

repositories{
    mavenCentral()
}

dependencies {
    // If AS is not able to find dependencies yet can to assemble from cmd, try synching AS.
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
    compile 'com.android.support:appcompat-v7:22.0.0'
    // unit tests should include
    testCompile 'junit:junit:4.12'
    // Need to use a partial mock (spy) so must use version 1.9.5 .
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'org.skyscreamer:jsonassert:1.2.3'
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.3.1'
}
